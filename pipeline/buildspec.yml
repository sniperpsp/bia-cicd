version: 0.2
phases:
  pre_build:
    commands:
      - echo Fazendo login no ECR...
      - aws --version     
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 730335588602.dkr.ecr.us-east-1.amazonaws.com
      - REPOSITORY_URI=730335588602.dkr.ecr.us-east-1.amazonaws.com/bia-ecr
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      # Instalando dependências necessárias
      - npm install
      # Recuperando credenciais do banco do Secrets Manager
      - export DB_CREDS=$(aws secretsmanager get-secret-value --secret-id bia-rds-credentials --query SecretString --output text)
      - export DB_USERNAME=$(echo $DB_CREDS | jq -r .username)
      - export DB_PASSWORD=$(echo $DB_CREDS | jq -r .password)
  build:
    commands:
      - echo Build iniciado em `date`
      - echo Gerando imagem da BIA.....
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build finalizado com sucesso em `date`
      - echo Fazendo push da imagem para o ECR.....
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Testando conexão com o banco de dados...
      - |
        echo "Executando migrations..."
        npx sequelize db:migrate
        if [ $? -eq 0 ]; then
          echo "✅ Migrations executadas com sucesso!"
        else
          echo "❌ Erro ao executar migrations"
          exit 1
        fi
      - echo Gerando artefato da imagem para o ECS
      - printf '[{"name":"bia","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files: imagedefinitions.json
